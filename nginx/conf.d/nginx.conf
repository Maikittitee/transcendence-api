# upstream frontend_server {
#     server frontend:8001;
# }

# upstream backend_server {
#    server backend:9000;
# }

# server {

#     listen       8001;
# 	listen       443 ssl;
#     listen  [::]:443 ssl;
#     server_name  localhost;

# 	ssl_protocols TLSv1.2 TLSv1.3;
# 	ssl_certificate /etc/nginx/ssl/nginx.crt;
#     ssl_certificate_key /etc/nginx/ssl/nginx.key;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;


#     location / {
#         # root   /usr/share/nginx/html;
#         # index  index.html index.htm;
#         proxy_pass http://frontend/;
#     }


#     location /api/ {
#          proxy_pass https://backend/;
#          proxy_set_header X-Real-IP $remote_addr; # Pass client IP
#          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#          proxy_set_header X-Forwarded-Host $host;
#          proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }

# Define upstream servers
# Upstream servers
upstream frontend_server {
    server frontend:8001;
}

upstream auth {
    server backend:9000;
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

# Main HTTPS Server
server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name localhost;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    # Proxy settings
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;

    # Serve Frontend via HTTPS
    location /web/ {
        proxy_pass http://frontend_server;  # No trailing slash
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API requests -> Backend
    location /api/ {
        proxy_pass http://auth;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}


# upstream frontend_server {
#     server manpower-frontend:3300;
# }

# upstream backend_server {
#    server manpower-backend:8801;
#    keepalive 64;
# }

# server {
#     if ($host = hrm.cititex.co.th) {
#         return 301 https://$host$request_uri;
#     }

#     listen 80;
#     listen [::]:80;
#     server_name hrm.cititex.co.th;
#     return 404;
# }

# server {
#     listen 443 ssl;
#     listen [::]:443 ssl ipv6only=on;

#     server_name hrm.cititex.co.th;

#     # ssl_certificate /etc/nginx/cert/manpower.crt;
#     # ssl_certificate_key /etc/nginx/cert/manpower.key;
#     ssl_certificate /var/sslcerts/star.cititex.co.th.crt;
#     ssl_certificate_key /var/sslcerts/star.cititex.co.th.private.key;

#     ssl_protocols TLSv1.2 TLSv1.3;
#     proxy_http_version 1.1;
#     proxy_set_header Upgrade $http_upgrade;
#     proxy_set_header Connection 'upgrade';
#     proxy_set_header Host $host;
#     proxy_cache_bypass $http_upgrade;

#     # root /usr/share/nginx/html;
#     include /etc/nginx/mime.types;


#     location / {
#         proxy_pass http://frontend_server/;
#     }

#    location /api/ {
#        proxy_pass http://backend_server/;
#        proxy_set_header X-Real-IP $remote_addr; # Pass client IP
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Host $host;
#        proxy_set_header X-Forwarded-Proto $scheme;
#     }

    # location /grafana/ {
    #     proxy_pass http://hrm.cititex.co.th:3000/;
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    # }
# }
