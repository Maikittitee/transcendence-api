# Generated by Django 4.2.5 on 2025-01-02 08:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        null=True,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                ("password", models.CharField(blank=True, max_length=128, null=True)),
                ("mfa_enabled", models.BooleanField(default=False)),
                ("mfa_secret", models.CharField(blank=True, max_length=16, null=True)),
                (
                    "provider_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="Unique identifier from the OAuth provider",
                        max_length=255,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        blank=True, help_text="OAuth2.0 access token", null=True
                    ),
                ),
                (
                    "refresh_token",
                    models.TextField(
                        blank=True, help_text="OAuth2.0 refresh token", null=True
                    ),
                ),
                (
                    "token_expires_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the access token expires",
                        null=True,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_oauth_user",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this user was created through OAuth",
                    ),
                ),
                (
                    "avatar",
                    models.FileField(blank=True, null=True, upload_to="upload/"),
                ),
                ("avatar_url", models.URLField(null=True)),
                (
                    "display_name",
                    models.CharField(default="NoDisplayName", max_length=25),
                ),
                (
                    "bio",
                    models.CharField(
                        default="Hello Everyone, Nice to meet you guy!", max_length=1000
                    ),
                ),
                ("win", models.IntegerField(default=0)),
                ("loss", models.IntegerField(default=0)),
                ("draw", models.IntegerField(default=0)),
                ("total_match", models.IntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
